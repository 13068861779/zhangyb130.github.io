{"meta":{"title":"哒哒瑟","subtitle":"每天进步一点点，专心的做自己喜欢的事情","description":null,"author":"大大帅","url":"https://ddssingsong.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-10-27T01:00:55.753Z","updated":"2019-09-08T15:31:42.000Z","comments":true,"path":"404.html","permalink":"https://ddssingsong.github.io/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2019-10-27T10:05:01.746Z","updated":"2019-10-27T10:05:01.746Z","comments":true,"path":"about/index.html","permalink":"https://ddssingsong.github.io/about/index.html","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 每天进步一点点，专心的做自己喜欢的事情 关于主题本站主题是：Material X资源文件：fontawesome"},{"title":"","date":"2019-10-27T01:00:55.763Z","updated":"2019-09-08T15:31:42.000Z","comments":true,"path":"projects/index.html","permalink":"https://ddssingsong.github.io/projects/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-10-27T01:00:55.753Z","updated":"2019-09-08T15:31:42.000Z","comments":true,"path":"blog/categories/index.html","permalink":"https://ddssingsong.github.io/blog/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-10-27T01:00:55.753Z","updated":"2019-09-08T15:31:42.000Z","comments":true,"path":"blog/tags/index.html","permalink":"https://ddssingsong.github.io/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【NDK系列13】Cmake详解 CMakeLists.txt详细配置","slug":"android/ndk/ndk-13","date":"2019-10-07T08:40:34.000Z","updated":"2019-10-31T10:04:57.432Z","comments":true,"path":"android/ndk/ndk-13/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-13/","excerpt":"作为Android开发者，还是乖乖的使用Cmake进行NDK的开发好了","text":"作为Android开发者，还是乖乖的使用Cmake进行NDK的开发好了 一、CMake简介CMake是一个比make更高级的编译配置工具，它可以根据不同平台、不同的编译器，生成相应的Makefile或者vcproj项目。从而达到跨平台的目的。 Android Studio利用CMake生成的是ninja，ninja是一个小型的关注速度的构建系统。我们不需要关心ninja的脚本，知道怎么配置cmake就可以了。从而可以看出cmake其实是一个跨平台的支持产出各种不同的构建脚本的一个工具。 在android studio 2.2及以上，构建原生库的默认工具是 CMake。 二、基本命令123456789#cmake最低版本cmake_minimum_required(VERSION 3.6.0)#指定项目project(Main)add_executable(demo demo.cpp) # 生成可执行文件add_library(common STATIC util.cpp) # 生成静态库add_library(common SHARED util.cpp) # 生成动态库或共享库 搜索c/cpp文件 1234567# 搜索当前目录下的所有.cpp文件， 但不能查找子目录aux_source_directory(. SRC_LIST) add_library(demo $&#123;SRC_LIST&#125;)#也可以 file(GLOB DIR_SRCS *.c)add_executable(main $&#123;DIR_SRCS&#125;) 使用子目录中的CMakeList 12345678910111213# 添加 child 子目录下的cmakelistadd_subdirectory(child)# 指定生成目标 add_library(main $&#123;DIR_SRCS&#125;)# 添加链接库target_link_libraries(main child)//--------------------------------------# child中设置aux_source_directory(. DIR_LIB_SRCS)# 生成链接库 默认生成静态库add_library (child $&#123;DIR_LIB_SRCS&#125;)#指定编译为静态库add_library (child STATIC $&#123;DIR_LIB_SRCS&#125;) 设置预编译宏 123#设置预编译宏 cflag和cxxflagset(CMAKE_C_FLAGS \"$&#123;CMAKE_C_FLAGS&#125; -DTEST\" )set(CMAKE_Cxx_FLAGS \"$&#123;CMAKE_Cxx_FLAGS&#125; -DTEST\" ) 引入头文件 123#这样就可以使用 #include &lt;xx&gt; 引入 #否则需要使用 #include \"path/xx\" include_directories( imported-lib/include/ ) 逻辑判断语句 123456789#逻辑判断 计较字符串set(ANDROID_ABI \"areambi-v7a\")if($&#123;ANDROID_ABI&#125; STREQUAL \"areambi\") message(\"armv5\")elseif($&#123;ANDROID_ABI&#125; STREQUAL \"areambi-v7a\") message(\"armv7a\")else() endif() 三、 build.gradle配置123456789//还可以在gradle中使用 arguments 设置一些配置externalNativeBuild &#123; cmake &#123; arguments \"-DANDROID_TOOLCHAIN=clang\", //使用的编译器clang/gcc \"-DANDROID_STL=gnustl_static\" //cmake默认就是 gnustl_static cFlags \"\" //这里也可以指定cflag和cxxflag,效果和之前的cmakelist里使用一样 cppFlags \"\" &#125; &#125; 四、 注意事项 ​ 使用Android.mk在 &gt;=6.0 设备上不能再使用预编译动态库(静态库没问题)： 12345678910111213141516cmake_minimum_required(VERSION 3.4.1)file(GLOB SOURCE *.c )add_library( hello-jni SHARED $&#123;SOURCE&#125; ) #这段配置在6.0依然没问题 set(CMAKE_C_FLAGS \"$&#123;CMAKE_C_FLAGS&#125; -L[SO所在目录]\")#这段配置只能在6.0以下使用 #add_library(Test SHARED IMPORTED)#set_target_properties(Test PROPERTIES IMPORTED_LOCATION [SO绝对地址])target_link_libraries( hello-jni Test ) 存在两个动态库libhello-jni.so 与 libTest.so。 libhello-jni.so依赖于libTest.so(使用NDK下的ndk-depends`可查看依赖关系)，则： 12345//&lt;=5.0: System.loadLibrary(\"Test\"); System.loadLibrary(\"hello-jni\");//&gt;=6.0: System.loadLibrary(\"hello-jni\");","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列12】Makefile Android.mk Application.mk 详解","slug":"android/ndk/ndk-12","date":"2019-10-06T08:40:34.000Z","updated":"2019-10-31T10:01:57.373Z","comments":true,"path":"android/ndk/ndk-12/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-12/","excerpt":"我们在使用第三方库时，很多都提供makefile，我们需要读懂他们并且适当的修改他们，另外虽说现在google推荐使用cmake，但是如果遇见Android.mk还是需要能够读懂。","text":"我们在使用第三方库时，很多都提供makefile，我们需要读懂他们并且适当的修改他们，另外虽说现在google推荐使用cmake，但是如果遇见Android.mk还是需要能够读懂。 一、什么是Makefile无论是c、c++首先要把源文件编译成中间代码文件，在Windows下也就是 .obj 文件，UNIX下是 .o 文件，即 Object File，这个动作叫做编译（compile），然后再把大量的Object File合成执行文件或者静动态库，这个动作叫作链接（link）。 一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，如何进行链接等等操作。 makefile 就是“自动化编译”，告诉make命令如何编译和链接,即make工具的配置脚本。 默认的情况下，gun make命令会在当前目录下按顺序找寻文件 “GNUmakefile” “makefile” “Makefile” 最好不要用“GNUmakefile”，这个文件是GNU的make识别的（Windows Nmake就不识别） 当然，也可以使用别的文件名来书写Makefile，比如：“Make.Linux”，“Make.android”。这样在使用时候就需要 make -f XX 或者 make --file XX。 二、Makefile规则1. 基本用法在Makefile中的命令，必须要以[Tab]键开始。 12345678在Makefile中的命令，必须要以[Tab]键开始。target : prerequisites ...(预备知识，先决条件) command（指令）----------------------------------------------------------------------------------------- target也就是一个目标文件，可以是Object File，也可以是执行文件。还可以是一个标签。 prerequisites 要生成那个target所需要的文件或是其他target。 command也就是make需要执行的命令。（任意的Shell命令） 如下例子 1234# g++ -o 指定生成可执行文件的名称# 下面的方法就是将main.o和test.o编译成test可执行程序testtest:main.o test1.o g++ -o test main.o test1.o 当然也可以直接编译cpp 1234# \\ 是换行连接符 便于Makefile的易读,不用都挤在一行test2: g++ -o test2 main.cpp \\test1.cpp clean 12clean: rm test main.o test.o 打印数据 12print: echo \"hello world\" 2. 变量如果比较复杂的情况，比如文件很多，target目标比较多，那么我们如果来修改，比如增加一个.cpp文件， 那可能需要在很多地方都写一下，也容易出错。为了易于维护，可以在makefile中使用变量。 1234567891011121314151617#声明变量objects=main.o T1.o#mac上自动编译 main.otest:$&#123;objects&#125; g++ -o test $&#123;objects&#125;clean: rm test $&#123;objects&#125; #======================================# *.c 表示所有后缀为c的文件。# 让通配符在变量中(当前目录下所有 .c 文件)objects = $(wildcard *.c)test : $&#123;objects&#125; gcc -o test $&#123;objects&#125;clean : rm test $&#123;obects&#125; 3. include123456include make.clean#或者mk=make.cleaninclude $&#123;mk&#125; 4. 文件搜索在一些大的工程中，有大量的源文件存放在不同的目录中,最好的方法是把一个路径告诉make，让make在自动去找。Makefile文件中的特殊变量VPATH就是完成这个功能的 12345678#默认先查找当前目录再查找当前目录下的a、b、c目录VPATH = a:b:cOBJ=a.o b.o c.o main.otest : $(OBJ) gcc -o test $(OBJ)clean : rm test $(OBJ) 5. 预定义变量 命令变量 含义 AR 函数库的打包程序，默认为”ar” AS 汇编语言编译程序,默认为”as” CC C语言编译程序,默认命令是”cc” CXX C++语言编译程序,默认命令是”g++” RM 文件删除程序的名称,默认值为 rm –f ARFLAGS 库文件维护程序的选项,无默认值 ASFLAGS 汇编程序的选项,无默认值 CFLAGS C 编译器的选项,无默认值 CPPFLAGS C 预编译的选项,无默认值 CXXFLAGS C++编译器的选项,无默认值 6. 自动变量 $@ target的名字 12345main.o:main.c gcc -c main.c -o main.o#使用 $@ 代替 main.omain.o:main.c gcc -c main.c -o $@ $&lt; target依赖的第一个依赖文件名 12345main.o:main.c a.h b.h gcc -c main.c -o main.o#使用 $&lt; 代替 main.cmain.o:main.c a.h b.h gcc -c $&lt; -o main.o 变量 说明 $* 不包含扩展名的target文件名称 $+ 所有的依赖文件,以空格分开,并以出现的先后为序,可能包含 重复的依赖文件 $? 所有时间戳比target文件晚的依赖文件,并以空格分开 $^ 所有不重复的依赖文件,以空格分开 7. 条件语句123456ifeq ($(CC),gcc) $(CC) -o foo $(objects) $(libs_for_gcc)else $(CC) -o foo $(objects) $(normal_libs)endif 8. 输出信息1234AAA=123456#输出变量AAA$(warning $(AAA))$(info $(AAA)) 三、Android.mk微小 GNU makefile 片段。 将源文件分组为模块。 模块是静态库、共享库或独立可执行文件。 可在每个 Android.mk 文件中定义一个或多个模块，也可在多个模块中使用同一个源文件。 123456789101112#源文件在的位置。宏函数 my-dir 返回当前目录LOCAL_PATH := $(call my-dir)#可为您清除变量#不会清理 LOCAL_PATH 变量include $(CLEAR_VARS)#存储您要构建的模块的名称 每个模块名称必须唯一，且不含任何空格#如果模块名称的开头已是 lib，则构建系统不会附加额外的前缀 lib；而是按原样采用模块名称，并添加 .so 扩展名。LOCAL_MODULE := hello-jni#包含要构建到模块中的 C 和/或 C++ 源文件列表 以空格分开LOCAL_SRC_FILES := hello-jni.c#构建动态库include $(BUILD_SHARED_LIBRARY) 1. 变量和宏定义自己的任意变量。在定义变量时请注意，NDK 构建系统会预留以下变量名称： 以 LOCAL_ 开头的名称，例如 LOCAL_MODULE。 以 PRIVATE_、NDK_ 或 APP 开头的名称。构建系统在内部使用这些变量。 小写名称，例如 my-dir。构建系统也是在内部使用这些变量。 如果为了方便而需要在 Android.mk 文件中定义自己的变量，建议在名称前附加 MY_。 2. 常用内置变量 变量名 含义 示例 BUILD_STATIC_LIBRARY 构建静态库的Makefile脚本 include $(BUILD_STATIC_LIBRARY) PREBUILT_SHARED_LIBRARY 预编译共享库的Makeifle脚本 include $(PREBUILT_SHARED_LIBRARY) PREBUILT_STATIC_LIBRARY 预编译静态库的Makeifle脚本 include $(PREBUILT_STATIC_LIBRARY) TARGET_PLATFORM Android API 级别号 TARGET_PLATFORM := android-22 TARGET_ARCH CUP架构 arm arm64 x86 x86_64 TARGET_ARCH_ABI CPU架构 armeabi armeabi-v7a arm64-v8a 模块描述变量 变量名 描述 例 LOCAL_MODULE_FILENAME 覆盖构建系统默认用于其生成的文件的名称 LOCAL_MODULE := foo LOCAL_MODULE_FILENAME := libnewfoo LOCAL_CPP_FEATURES 特定 C++ 功能 支持异常:LOCAL_CPP_FEATURES := exceptions LOCAL_C_INCLUDES 头文件目录查找路径 LOCAL_C_INCLUDES := $(LOCAL_PATH)/include LOCAL_CFLAGS 构建 C 和 C++ 的编译参数 LOCAL_CPPFLAGS c++ LOCAL_STATIC_LIBRARIES 当前模块依赖的静态库模块列表 LOCAL_SHARED_LIBRARIES LOCAL_WHOLE_STATIC_LIBRARIES –whole-archive 将未使用的函数符号也加入编译进入这个模块 LOCAL_LDLIBS 依赖 系统库 LOCAL_LDLIBS := -lz 导出给引入模块的模块使用 LOCAL_EXPORT_CFLAGS LOCAL_EXPORT_CPPFLAGS LOCAL_EXPORT_C_INCLUDES LOCAL_EXPORT_LDLIBS 3. 引入其他模块123456789#将一个新的路径加入NDK_MODULE_PATH变量#NDK_MODULE_PATH 变量是系统环境变量$(call import-add-path,$(LOCAL_PATH)/platform/third_party/android/prebuilt)#包含CocosDenshion/android目录下的mk文件$(call import-module,CocosDenshion/android)#这里即为 我需要引入 CocosDenshion/android 下面的Android.mk#CocosDenshion/android 的路径会从 $(LOCAL_PATH)/platform/third_party/android/prebuilt 去查找 四、Application.mk1. 配置同样是GNU Makefile 片段,在Application.mk中定义一些全局(整个项目)的配置 APP_OPTIM 将此可选变量定义为 release 或 debug。在构建应用的模块时可使用它来更改优化级别。发行模式是默认模式，可生成高度优化的二进制文件。调试模式会生成未优化的二进制文件，更容易调试。 APP_CFLAGS 为任何模块编译任何 C 或 C++ 源代码时传递到编译器的一组 C 编译器标志 APP_CPPFLAGS 构建 C++ 源文件时传递到编译器的一组 C++ 编译器标志。 APP_ABI 需要生成的cpu架构(ndk r17之上 只支持：armeabi-v7a, arm64-v8a, x86, x86_64) APP_PLATFORM 此变量包含目标 Android 平台的名称。例如，android-3 指定 Android 1.5 系统映像 APP_STL 默认情况下，NDK 构建系统为 Android 系统提供的最小 C++ 运行时库 (system/lib/libstdc++.so) 提供 C++ 功能。 2. APP_ABI架构不同 Android 手机使用不同的 CPU，因此支持不同的指令集。 armeabi 此 ABI 适用于基于 ARM、至少支持 ARMv5TE 指令集的 CPU。此 ABI 不支持硬件辅助的浮点计算。 相反，所有浮点运算都使用编译器 libgcc.a 静态库中的软件帮助程序函数。 armeabi-v7a armeabi-v7a ABI 使用 -mfloat-abi=softfp 开关强制实施规则，要求编译器在函数调用时必须传递核心寄存器对中的所有双精度值，而不是专用浮点值。 系统可以使用 FP 寄存器执行所有内部计算。 这样可极大地加速计算。 如果要以 armeabi-v7a ABI 为目标，则必须设置下列标志： 1CFLAGS= -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 arm64-v8a 此 ABI 适用于基于 ARMv8、支持 AArch64 的 CPU。它还包含 NEON 和 VFPv4 指令集。 x86 此 ABI 适用于支持通常称为“x86”或“IA-32”的指令集的 CPU。设置的标志如： 1-march=i686 -mtune=intel -mssse3 -mfpmath=sse -m32 x86_64 1-march=x86-64 -msse4.2 -mpopcnt -m64 -mtune=intel 现在手机主要是armeabi-v7a。查看手机cpu： 12adb shell cat /proc/cpuinfoadb shell getprop ro.product.cpu.abi apk在安装的时候，如果手机是armeabi-v7a的，则会首先查看apk中是否存在armeabi-v7a目录，如果没有就会查找armeabi。 保证cpu目录下so数量一致。 如果目标是armeabi-v7a，但是拥有一个armeabi的，也可以把它放到armeabi-v7a目录下。但是反过来不行 ABI(横 so)/CPU(竖 手机) armeabi armeabi-v7a arm64-v8a x86 x86_64 ARMV5 支持 ARMV7 支持 支持 ARMV8 支持 支持 支持 X86 支持 X86_64 支持 支持","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列11】编译器 clang gcc g++","slug":"android/ndk/ndk-11","date":"2019-10-05T09:14:21.000Z","updated":"2019-10-31T09:55:39.183Z","comments":true,"path":"android/ndk/ndk-11/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-11/","excerpt":"了解c/c++编译器的基本使用，能够在后续移植第三方框架进行交叉编译时，清楚的了解应该传递什么参数。","text":"了解c/c++编译器的基本使用，能够在后续移植第三方框架进行交叉编译时，清楚的了解应该传递什么参数。 1. gcc/g++/clang了解c/c++编译器的基本使用，能够在后续移植第三方框架进行交叉编译时，清楚的了解应该传递什么参数。 clangclang 是一个C、C++、Object-C的轻量级编译器。基于LLVM （LLVM是以C++编写而成的构架编译器的框架系统，可以说是一个用于开发编译器相关的库） gccGNU C编译器。原本只能处理C语言，很快扩展，变得可处理C++。(GNU计划，又称革奴计划。目标是创建一套完全自由的操作系统) g++GNU c++编译器 gcc、g++、clang都是编译器。 gcc和g++都能够编译c/c++，但是编译时候行为不同。 clang也是一个编译器，对比gcc，它具有编译速度更快、编译产出更小等优点，但是某些软件在使用clang编译时候因为源码中内容的问题会出现错误。 clang++与clang就相当于gcc与g++。 对于gcc与g++： 后缀为.c的源文件，gcc把它当作是C程序，而g++当作是C++程序；后缀为.cpp的，两者都会认为是c++程序 g++会自动链接c++标准库stl，gcc不会 gcc不会定义__cplusplus宏，而g++会 linux安装gcc 1apt install build-essential #安装gcc、g++与make 2. 编译器过程一个C/C++文件要经过预处理(preprocessing)、编译(compilation)、汇编(assembly)、和连接(linking)才能变成可执行文件。 1、预处理​ gcc -E main.c -o main.i ​ -E的作用是让gcc在预处理结束后停止编译。 ​ 预处理阶段主要处理include和define等。它把#include包含进来的.h 文件插入到#include所在的位置，把源程序中使用到的用#define定义的宏用实际的字符串代替 2、编译阶段​ gcc -S main.i -o main.s ​ -S的作用是编译后结束，编译生成了汇编文件。 ​ 在这个阶段中，gcc首先要检查代码的规范性、是否有语法错误等，以确定代码的实际要做的工作，在检查无误后，gcc把代码翻译成汇编语言。 3、汇编阶段​ gcc -c main.s -o main.o ​ 汇编阶段把 .s文件翻译成二进制机器指令文件.o,这个阶段接收.c, .i, .s的文件都没有问题。 4、链接阶段​ gcc -o main main.s ​ 链接阶段，链接的是函数库。在main.c中并没有定义”printf”的函数实现，且在预编译中包含进的”stdio.h”中也只有该函数的声明。系统把这些函数实现都被做到名为libc.so的动态库。 其他函数库一般分为静态库和动态库两种 静态库是指编译链接时，把库文件的代码全部加入到可执行文件中，因此生成的文件比较大，但在运行时也就不再需要库文件了。Linux中后缀名为”.a”。 动态库与之相反，在编译链接时并没有把库文件的代码加入到可执行文件中，而是在程序执行时由运行时链接文件加载库。Linux中后缀名为”.so”，如前面所述的libc.so就是动态库。gcc在编译时默认使用动态库。 静态库节省时间:不需要再进行动态链接，需要调用的代码直接就在代码内部 动态库节省空间:如果一个动态库被两个程序调用,那么这个动态库只需要在内存中 Java中在不经过封装的情况下只能直接使用动态库。","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列10】Java和c++交互  Jni初识","slug":"android/ndk/ndk-10","date":"2019-10-04T07:13:50.000Z","updated":"2019-10-31T09:48:30.570Z","comments":true,"path":"android/ndk/ndk-10/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-10/","excerpt":"JNI是一种本地编程接口。它允许运行在JAVA虚拟机中的JAVA代码和用其他编程语言，诸如C语言、C++、汇编，应用和库之间的交互操作。 不只是Android特有的东西","text":"JNI是一种本地编程接口。它允许运行在JAVA虚拟机中的JAVA代码和用其他编程语言，诸如C语言、C++、汇编，应用和库之间的交互操作。 不只是Android特有的东西 一、Java调用c++方法静态加载so 123 static &#123; System.loadLibrary(\"native-lib\");&#125; c++中和java中对应方法 12// javapublic static native void native11(); 12345678910111213141516// 对应上面的java方法extern \"C\"JNIEXPORT jstring JNICALLJava_com_dds_anyndk_AnyNdk_native11(JNIEnv *env, jclass type, jint a, jstring str_, jfloat f) &#123; // 获得c字符串 const char *str = env-&gt;GetStringUTFChars(str_, JNI_FALSE); char returnStr[100]; //格式化字符串 sprintf(returnStr, \"C++ string:%d,%s,%f\", a, str, f); //释放掉内存 env-&gt;ReleaseStringUTFChars(str_, str); return env-&gt;NewStringUTF(returnStr);&#125; CmakeLists.txt配置 12345678910cmake_minimum_required(VERSION 3.4.1)add_library( native-lib SHARED native11.cpp)target_link_libraries( native-lib log) 二、JNI数据类型JNIEXPORT 和 JNICALL，定义在jni.h头文件中。 JNIEXPORT： 在 Windows 中,定义为__declspec(dllexport)。因为Windows编译 dll 动态库规定，如果动态库中的函数要被外部调用，需要在函数声明中添加此标识，表示将该函数导出在外部可以调用。 在 Linux/Unix/Mac os/Android 这种 Like Unix系统中，定义为attribute ((visibility (“default”))) JNICALL: 在类Unix中无定义，在Windows中定义为：_stdcall ，一种函数调用约定 类Unix系统中这两个宏可以省略不加。 类型对比如下 Java类型 本地类型 描述 boolean jboolean C/C++8位整型 byte jbyte C/C++带符号的8位整型 char jchar C/C++无符号的16位整型 short jshort C/C++带符号的16位整型 int jint C/C++带符号的32位整型 long jlong C/C++带符号的64位整型 float jfloat C/C++32位浮点型 double jdouble C/C++64位浮点型 Object jobject 任何Java对象，或者没有对应java类型的对象 Class jclass Class对象 String jstring 字符串对象 Object[] jobjectArray 任何对象的数组 boolean[] jbooleanArray 布尔型数组 byte[] jbyteArray 比特型数组 char[] jcharArray 字符型数组 short[] jshortArray 短整型数组 int[] jintArray 整型数组 long[] jlongArray 长整型数组 float[] jfloatArray 浮点型数组 double[] jdoubleArray 双浮点型数组 获取数组类型的数据 12345678910111213141516171819202122232425262728extern \"C\"JNIEXPORT jstring JNICALLJava_com_dds_anyndk_AnyNdk_native11_12(JNIEnv *env, jclass type, jobjectArray strs, jintArray ints_) &#123; //1、 获得字符串数组 int32_t str_length = env-&gt;GetArrayLength(strs); LOGD(\"字符串 数组长度:%d\", str_length); for (int i = 0; i &lt; str_length; ++i) &#123; jstring str = jstring(env-&gt;GetObjectArrayElement(strs, i)); const char *c_str = env-&gt;GetStringUTFChars(str, JNI_FALSE); LOGD(\"字符串有:%s\", c_str); //使用完释放 env-&gt;ReleaseStringUTFChars(str, c_str); &#125; //2、获得基本数据类型数组 int32_t int_length = env-&gt;GetArrayLength(ints_); LOGD(\"int 数组长度:%d\", int_length); jint *ints = env-&gt;GetIntArrayElements(ints_, nullptr); for (int i = 0; i &lt; int_length; i++) &#123; LOGD(\"int 数据有:%d\", ints[i]); &#125; env-&gt;ReleaseIntArrayElements(ints_, ints, 0); return env-&gt;NewStringUTF(\"hello\");&#125; 三、C/C++反射Java在C/C++中反射创建Java的对象，调用Java的方法 基本数据类型的签名采用一系列大写字母来表示, 如下表所示: Java类型 签名 boolean Z short S float F byte B int I double D char C long J void V 引用类型 L + 全限定名 + ; 数组 [+类型签名 需要反射的方法 123456789101112public class JavaHelper &#123; private static final String TAG = \"dds_native11\"; //private和public 对jni开发来说没任何区别 都能反射调用 public void instanceMethod(String a, int b, boolean c) &#123; Log.e(TAG, \"instanceMethod a=\" + a + \" b=\" + b + \" c=\" + c); &#125; public static void staticMethod(String a, int b, boolean c) &#123; Log.e(TAG, \"staticMethod a=\" + a + \" b=\" + b + \" c=\" + c); &#125;&#125; 1. 反射调用方法123456789101112131415161718192021222324252627extern \"C\"JNIEXPORT jstring JNICALLJava_com_dds_anyndk_AnyNdk_native11_13(JNIEnv *env, jclass type) &#123; jclass class_helper = env-&gt;FindClass(\"com/dds/anyndk/JavaHelper\"); // 反射调用静态方法 jmethodID method_staticMethod = env-&gt;GetStaticMethodID(class_helper, \"staticMethod\", \"(Ljava/lang/String;IZ)V\"); jstring staticStr = env-&gt;NewStringUTF(\"C++调用静态方法\"); env-&gt;CallStaticVoidMethod(class_helper, method_staticMethod, staticStr, 1, true); // 反射调用构造方法 jmethodID constructMethod = env-&gt;GetMethodID(class_helper,\"&lt;init&gt;\",\"()V\"); jobject helper = env-&gt;NewObject(class_helper,constructMethod); jmethodID instanceMethod = env-&gt;GetMethodID(class_helper,\"instanceMethod\",\"(Ljava/lang/String;IZ)V\"); jstring instanceStr= env-&gt;NewStringUTF(\"C++调用实例方法\"); env-&gt;CallVoidMethod(helper,instanceMethod,instanceStr,2,0); // 释放资源 env-&gt;DeleteLocalRef(class_helper); env-&gt;DeleteLocalRef(staticStr); env-&gt;DeleteLocalRef(instanceStr); env-&gt;DeleteLocalRef(helper); return env-&gt;NewStringUTF(\"dds\");&#125; 可以使用javap来获取反射方法时的签名 1javap -s com.dds.anyndk.JavaHelper 2. 反射修改变量需要反射的方法 12345678910public class JavaHelper &#123; int a = 10; static String b = \"java字符串\"; public void testReflect(JavaHelper javaHelper) &#123; Log.e(TAG, \"修改前 ： a = \" + a + \" b=\" + b); AnyNdk.native11_4(javaHelper); Log.e(TAG, \"修改后 ： a = \" + a + \" b=\" + b); &#125;&#125; 反射 12345678910111213141516171819202122232425262728293031323334#define LOG_TAG \"dds_native4\"#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__ )extern \"C\"JNIEXPORT void JNICALLJava_com_dds_anyndk_AnyNdk_native11_14(JNIEnv *env, jclass type, jobject javaHelper) &#123; jclass clazz = env-&gt;GetObjectClass(javaHelper); //获得int a的标示 jfieldID a = env-&gt;GetFieldID(clazz, \"a\", \"I\"); // 获取a的值 int value = env-&gt;GetIntField(javaHelper, a); LOGD(\"获得java属性a:%d\", value); env-&gt;SetIntField(javaHelper, a, 100); // 获取String b 的标示 jfieldID b = env-&gt;GetStaticFieldID(clazz, \"b\", \"Ljava.lang.String;\"); // 获取静态变量的值 auto bStr = jstring(env-&gt;GetStaticObjectField(clazz, b)); const char *bc_str = env-&gt;GetStringUTFChars(bStr, JNI_FALSE); LOGD(\"获得java属性b:%s\", bc_str); jstring new_str = env-&gt;NewStringUTF(\"C++字符串\"); env-&gt;SetStaticObjectField(clazz, b, new_str); // 释放资源 env-&gt;ReleaseStringUTFChars(bStr, bc_str); env-&gt;DeleteLocalRef(new_str); env-&gt;DeleteLocalRef(clazz);&#125; 四、JNI_OnLoad调用System.loadLibrary()函数时， 内部就会去查找so中的 JNI_OnLoad 函数，如果存在此函数则调用。 JNI_OnLoad会： 告诉 VM 此 native 组件使用的 JNI 版本。 对应了Java版本，android中只支持JNI_VERSION_1_2 、JNI_VERSION_1_4、JNI_VERSION_1_6 在JDK1.8有 JNI_VERSION_1_8。 1234jint JNI_OnLoad(JavaVM* vm, void* reserved)&#123; // 2、4、6都可以 return JNI_VERSION_1_4;&#125; 动态注册在此之前我们一直在jni中使用的 Java_PACKAGENAME_CLASSNAME_METHODNAME 来进行与java方法的匹配，这种方式我们称之为静态注册。 而动态注册则意味着方法名可以不用这么长了，在android aosp源码中就大量的使用了动态注册的形式 123456789101112131415161718192021222324252627282930313233343536//Java：native void dynamicNative();native String dynamicNative(int i);//C++：void dynamicNative1(JNIEnv *env, jobject jobj)&#123; LOGE(\"dynamicNative1 动态注册\");&#125;jstring dynamicNative2(JNIEnv *env, jobject jobj,jint i)&#123; return env-&gt;NewStringUTF(\"我是动态注册的dynamicNative2方法\");&#125;//需要动态注册的方法数组static const JNINativeMethod mMethods[] = &#123; &#123;\"dynamicNative\",\"()V\", (void *)dynamicNative1&#125;, &#123;\"dynamicNative\", \"(I)Ljava/lang/String;\", (jstring *)dynamicNative2&#125;&#125;;//需要动态注册native方法的类名static const char* mClassName = \"com/dds/anyndk/AnyNdk\";jint JNI_OnLoad(JavaVM *vm, void *reserved) &#123; JNIEnv *env = NULL; //获得 JniEnv int r = vm-&gt;GetEnv((void **) &amp;env, JNI_VERSION_1_4); if (r != JNI_OK) &#123; return -1; &#125; jclass activityCls = env-&gt;FindClass(mClassName); // 注册 如果小于0则注册失败 r = env-&gt;RegisterNatives(activityCls, mMethods, 2); if (r != JNI_OK) &#123; return -1; &#125; return JNI_VERSION_1_4;&#125; 五、c++线程中调用Javanative调用java需要使用JNIEnv这个结构体，而JNIEnv是由Jvm传入与线程相关的变量。 但是可以通过JavaVM的AttachCurrentThread方法来获取到当前线程中的JNIEnv指针。 123456789101112131415161718192021222324252627282930JavaVM* _vm = 0;jobject _instance = 0;jint JNI_OnLoad(JavaVM* vm, void* reserved)&#123; _vm = vm; return JNI_VERSION_1_4;&#125;void *task(void *args) &#123; JNIEnv *env; _vm-&gt;AttachCurrentThread(&amp;env, 0); jclass clazz = env-&gt;GetObjectClass(_instance); jmethodID methodId = env-&gt;GetStaticMethodID(clazz, \"staticMethod\", \"(Ljava/lang/String;IZ)V\"); jstring staticStr = env-&gt;NewStringUTF(\"C++调用静态方法\"); env-&gt;CallStaticVoidMethod(clazz, methodId, staticStr, 1, true); env-&gt;DeleteLocalRef(clazz); env-&gt;DeleteLocalRef(staticStr); _vm-&gt;DetachCurrentThread(); return 0;&#125;extern \"C\"JNIEXPORT void JNICALLJava_com_dds_anyndk_AnyNdk_native11_15(JNIEnv *env, jclass type, jobject javaHelper) &#123; pthread_t pid; _instance = env-&gt;NewGlobalRef(javaHelper); // 开启线程 pthread_create(&amp;pid, 0, task, 0);&#125; 代码https://github.com/ddssingsong/AnyNdk","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列9】c++ 智能指针","slug":"android/ndk/ndk-9","date":"2019-10-04T02:13:35.000Z","updated":"2019-10-31T09:40:12.581Z","comments":true,"path":"android/ndk/ndk-9/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-9/","excerpt":"自C++11起，C++标准库提供了两大类型的智能指针","text":"自C++11起，C++标准库提供了两大类型的智能指针 1. shared_ptr操作引用计数实现共享式拥有的概念。多个智能指针可以指向相同的对象，这个对象和其相关资源会在最后一个被销毁时释放。 123456789101112class A &#123;public: ~A() &#123; cout &lt;&lt; \"释放A\" &lt;&lt; endl; &#125;&#125;;void test() &#123; //自动释放 引用计数为1 shared_ptr&lt;A&gt; a(new A()); //退出方法 shared_ptr a本身释放，对内部的 A 对象引用计数减1 则为0 释放new 出来的A 对象 &#125; 虽然使用shared_ptr能够非常方便的为我们自动释放对象，但是还是会出现一些问题。最典型的就是循环引用问题。 12345678910111213141516171819202122232425class B;class A &#123;public: ~A() &#123; cout &lt;&lt; \"释放A\" &lt;&lt; endl; &#125; shared_ptr&lt;B&gt; b;&#125;;class B &#123;public: ~B() &#123; cout &lt;&lt; \"释放B\" &lt;&lt; endl; &#125; shared_ptr&lt;A&gt; a;&#125;;void test() &#123; //自动释放 shared_ptr&lt;A&gt; a(new A()); //A引用计数为1 shared_ptr&lt;B&gt; b(new B()); //B引用计数为1 cout &lt;&lt; a.use_count() &lt;&lt; endl; //查看内部对象引用计数 a-&gt;b = b; //A 引用计数为2 b-&gt;a = a; //B 引用计数为2 //退出方法，a释放，A引用计数-1结果为1 不会释放 B也一样&#125; 2. weak_ptrweak_ptr是为配合shared_ptr而引入的一种智能指针。主要用于观测资源的引用情况。 它的构造和析构不会引起引用记数的增加或减少。没有重载*和-&gt;但可以使用lock获得一个可用的shared_ptr对象。 weak_ptr 提供expired 方法等价于 use_count == 0，当expired为true时，lock返回一个存储空指针的shared_ptr 配合shared_ptr解决循环引用问题 12345678910111213141516171819202122232425class B;class A &#123;public: ~A() &#123; cout &lt;&lt; \"释放A\" &lt;&lt; endl; &#125; weak_ptr&lt;B&gt; b;&#125;;class B &#123;public: ~B() &#123; cout &lt;&lt; \"释放B\" &lt;&lt; endl; &#125; weak_ptr&lt;A&gt; a;&#125;;void test() &#123; //自动释放 shared_ptr&lt;A&gt; a(new A()); //A引用计数为1 shared_ptr&lt;B&gt; b(new B()); //B引用计数为1 a-&gt;b = b; //weak_ptr 引用计数不增加 b-&gt;a = a; //weak_ptr 引用计数不增加 //退出方法，A B释放&#125; 3. unique_ptr实现独占式引用，保证同一时间只有一个智能指针指向内部对象。 1unique_ptr&lt;A&gt; a(new A()); 4. 自定义智能指针123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051template &lt;typename T&gt;class Ptr &#123;public: Ptr() &#123; count = new int(1); t = 0; &#125; Ptr(T *t):t(t) &#123; //引用计数为1 count = new int(1); &#125; ~Ptr() &#123; //引用计数-1 为0表示可以释放T了 if (--(*count) == 0) &#123; if (t) &#123; delete t; &#125; delete count; t = 0; count = 0; &#125; &#125; //拷贝构造函数 Ptr(const Ptr&lt;T&gt; &amp;p) &#123; //引用计数+1 ++(*p.count); t = p.t; count = p.count; &#125; Ptr&lt;T&gt;&amp; operator=(const Ptr&lt;T&gt;&amp; p) &#123; ++(*p.count); //检查老的数据是否需要删除 if (--(*count) == 0) &#123; if (t) &#123; delete t; &#125; delete count; &#125; t = p.t; count = p.count; return *this; &#125; //重载-&gt; 操作T 类 T* operator-&gt;() &#123; return t; &#125;private: T *t; int *count;&#125;;","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列8】c++ 线程基本使用 线程同步","slug":"android/ndk/ndk-8","date":"2019-10-03T07:13:35.000Z","updated":"2019-10-31T09:37:57.832Z","comments":true,"path":"android/ndk/ndk-8/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-8/","excerpt":"线程，有时被称为轻量进程，是程序执行的最小单元。","text":"线程，有时被称为轻量进程，是程序执行的最小单元。 一、C++11线程123456789#include &lt;thread&gt;void task(int i) &#123; cout &lt;&lt; \"task:\" &lt;&lt; i &lt;&lt; endl;&#125;thread t1(task,100);//等待线程结束再继续执行t1.join(); 二、POSIX线程POSIX 可移植操作系统接口，标准定义了操作系统应该为应用程序提供的接口标准 1234567891011#include &lt;pthread.h&gt;void *pthreadTask(void* args) &#123; int* i = static_cast&lt;int*&gt;(args); cout &lt;&lt; \"posix线程:\" &lt;&lt; *i &lt;&lt; endl; return 0;&#125;pthread_t pid;int pi = 100;pthread_create(&amp;pid, 0, pthreadTask, &amp;pi);//等待线程的结束pthread_join(pid,0); 1. 线程属性线程具有属性，用 pthread_attr_t 表示 1234pthread_attr_t attr;//初始化 attr中为操作系统实现支持的线程所有属性的默认值pthread_attr_init(&amp;attr);pthread_attr_destroy(&amp;attr); 分离线程线程创建默认是非分离的，当pthread_join()函数返回时，创建的线程终止，释放自己占用的系统资源 分离线程不能被其他线程等待,pthread_join()无效，线程自己玩自己的。 1234//设置是否为分离线程//PTHREAD_CREATE_DETACHED 分离//PTHREAD_CREATE_JOINABLE 非分离pthread_attr_setdetachstate(&amp;attr,PTHREAD_CREATE_DETACHED); 调度策略与优先级12345678910111213141516//设置调度策略 //返回0 设置成功pthread_attr_setschedpolicy(&amp;attr, SCHED_FIFO);// SCHED_FIFO // 实时调度策略，先到先服务 一旦占用cpu则一直运行。一直运行直到有更高优先级任务到达或自己放弃。// SCHED_RR// 实时调度策略，时间轮转 系统分配一个时间段，在时间段内执行本线程//设置优先级//获得对应策略的最小、最大优先级int max = sched_get_priority_max(SCHED_FIFO);int min = sched_get_priority_min(SCHED_FIFO);sched_param param;param.sched_priority = max;pthread_attr_setschedparam(&amp;attr, &amp;param); 1. 线程同步多线程同时读写同一份共享资源的时候，可能会引起冲突。需要引入线程“同步”机制，即各位线程之间有序地对共享资源进行操作。 以下是会出现问题的写法 1234567891011121314151617181920212223242526272829303132#include &lt;pthread.h&gt;using namespace std;queue&lt;int&gt; q;void *pop(void* args) &#123; // 线程未同步导致的多线程安全问题 // 会有重复的数据取出并出现异常 if (!q.empty()) &#123; printf(\"取出数据:%d\\n\", q.front()); q.pop(); &#125; else &#123; printf(\"无数据\\n\"); &#125; return 0;&#125;int main()&#123; for (size_t i = 0; i &lt; 5; i++) &#123; q.push(i); &#125; pthread_t pid[10]; for (size_t i = 0; i &lt; 10; i++) &#123; pthread_create(&amp;pid[i], 0, pop, &amp;q); &#125; system(\"pause\"); return 0;&#125; 加入互斥锁 12345678910111213141516171819202122232425262728293031323334353637383940queue&lt;int&gt; q;pthread_mutex_t mutex;void *pop(void* args) &#123; // 锁 pthread_mutex_lock(&amp;mutex); if (!q.empty()) &#123; printf(\"取出数据:%d\\n\", q.front()); q.pop(); &#125; else &#123; printf(\"无数据\\n\"); &#125; // 放 pthread_mutex_unlock(&amp;mutex); return 0;&#125;int main()&#123; //初始化互斥锁 pthread_mutex_init(&amp;mutex, 0); for (size_t i = 0; i &lt; 5; i++) &#123; q.push(i); &#125; pthread_t pid[10]; for (size_t i = 0; i &lt; 10; i++) &#123; pthread_create(&amp;pid[i], 0, pop, &amp;q); &#125; //需要释放 for (size_t i = 0; i &lt; 10; i++) &#123; pthread_join(pid[i], 0); &#125; pthread_mutex_destroy(&amp;mutex); system(\"pause\"); return 0;&#125; 2. 条件变量条件变量是线程间进行同步的一种机制，主要包括两个动作：一个线程等待”条件变量的条件成立”而挂起；另一个线程使”条件成立”,从而唤醒挂起线程 12345678910111213141516171819202122232425262728293031template &lt;class T&gt;class SafeQueue &#123;public: SafeQueue() &#123; pthread_mutex_init(&amp;mutex,0); &#125; ~SafeQueue() &#123; pthread_mutex_destory(&amp;mutex); &#125; void enqueue(T t) &#123; pthread_mutex_lock(&amp;mutex); q.push(t); pthread_mutex_unlock(&amp;mutex); &#125; int dequeue(T&amp; t) &#123; pthread_mutex_lock(&amp;mutex); if (!q.empty()) &#123; t = q.front(); q.pop(); pthread_mutex_unlock(&amp;mutex); return 1; &#125; pthread_mutex_unlock(&amp;mutex); return 0; &#125;private: queue&lt;T&gt; q; pthread_mutex_t mutex;&#125;; 上面的模板类存放数据T，并使用互斥锁保证对queue的操作是线程安全的。这就是一个生产/消费模式。 如果在取出数据的时候，queue为空，则一直等待，直到下一次enqueue加入数据。 这就是一个典型的生产/消费模式, 加入条件变量使 “dequeue” 挂起,直到由其他地方唤醒 下面是使用条件变量实现 通过使用cond条件来 唤醒等待中的线程 12345678910111213141516171819202122232425262728293031323334353637383940414243#pragma once#include &lt;queue&gt;using namespace std;template &lt;class T&gt;class SafeQueue &#123;public: SafeQueue() &#123; pthread_mutex_init(&amp;mutex,0); pthread_cond_init(&amp;cond, 0); &#125; ~SafeQueue() &#123; pthread_mutex_destory(&amp;mutex); pthread_cond_destory(&amp;cond); &#125; void enqueue(T t) &#123; pthread_mutex_lock(&amp;mutex); q.push(t); //发出信号 通知挂起线程 //由系统唤醒一个线程 //pthread_cond_signal(&amp;cond); // 广播 对应多个消费者的时候 多个线程等待唤醒所有 pthread_cond_broadcast(&amp;cond); pthread_mutex_unlock(&amp;mutex); &#125; int dequeue(T&amp; t) &#123; pthread_mutex_lock(&amp;mutex); //可能被意外唤醒 所以while循环 while (q.empty()) &#123; pthread_cond_wait(&amp;cond, &amp;mutex); &#125; t = q.front(); q.pop(); pthread_mutex_unlock(&amp;mutex); return 1; &#125;private: queue&lt;T&gt; q; pthread_mutex_t mutex; pthread_cond_t cond;&#125;; 代码https://github.com/ddssingsong/AnyNdk","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列7】c/c++ 文件与流操作","slug":"android/ndk/ndk-7","date":"2019-10-03T07:13:30.000Z","updated":"2019-10-31T08:22:59.012Z","comments":true,"path":"android/ndk/ndk-7/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-7/","excerpt":"这篇主要讲c/c++的文件读写操作","text":"这篇主要讲c/c++的文件读写操作 一、C 语言的文件读写操作头文件 : stdio.h 函数原型：FILE * fopen(const char * path, const char * mode); path: 操作的文件路径 mode:模式 模式 描述 r 打开一个已有的文本文件，允许读取文件。 w 打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。 a 打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。 r+ 打开一个文本文件，允许读写文件。 w+ 打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。 a+ 打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。 写入 12345678910111213FILE *f = fopen(\"xxxx\\\\t.txt\",\"w\");//写入单个字符fputc('a', f);fclose(f);FILE *f = fopen(\"xxxx\\\\t.txt\",\"w\");char *txt = \"123456\";//写入以 null 结尾的字符数组fputs(txt, f);//格式化并输出fprintf(f,\"%s\",txt);fclose(f); 读取 12345678910char buff[255];FILE *f = fopen(\"xxxx\\\\t.txt\", \"r\");//读取 遇到第一个空格字符停止fscanf(f, \"%s\", buff);printf(\"1: %s\\n\", buff);//最大读取 255-1 个字符fgets(buff, 255, f);printf(\"2: %s\\n\", buff);fclose(f); 二进制读写 123456789101112//二进制 I/O 函数size_t fread(void *ptr, size_t size_of_elements, size_t number_of_elements, FILE *a_file); size_t fwrite(const void *ptr, size_t size_of_elements, size_t number_of_elements, FILE *a_file);//1、写入/读取数据缓存区//2、每个数据项的大小//3、多少个数据项//4、流//如：图片、视频等以二进制操作://写入buffer 有 1024个字节fwrite(buffer,1024,1,f); 二、C++ 文件读写操作&lt;iostream\\&gt; 和 \\&lt;fstream\\&gt; 数据类型 描述 ofstream 输出文件流，创建文件并向文件写入信息。 ifstream 输入文件流，从文件读取信息。 fstream 文件流，且同时具有 ofstream 和 ifstream 两种功能。 12345678910111213141516171819202122char data[100];// 以写模式打开文件ofstream outfile;outfile.open(\"XXX\\\\f.txt\");cout &lt;&lt; \"输入你的名字: \";//cin 接收终端的输入cin &gt;&gt; data;// 向文件写入用户输入的数据outfile &lt;&lt; data &lt;&lt; endl;// 关闭打开的文件outfile.close();// 以读模式打开文件ifstream infile;infile.open(\"XXX\\\\f.txt\");cout &lt;&lt; \"读取文件\" &lt;&lt; endl;infile &gt;&gt; data;cout &lt;&lt; data &lt;&lt; endl;// 关闭infile.close();","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列6】C++ 容器","slug":"android/ndk/ndk-6","date":"2019-10-03T07:13:23.000Z","updated":"2019-10-31T08:17:46.785Z","comments":true,"path":"android/ndk/ndk-6/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-6/","excerpt":"容器，就是用来存放东西的盒子。 常用的容器包括：数组array, 链表list， 树tree， 栈stack， 队列queue， 散列表hash table, 集合set、映射表map 等等。容器便是容纳这些数据结构的。这些数据结构分为序列式与关联式两种，容器也分为序列式容器和关联式容器。","text":"容器，就是用来存放东西的盒子。 常用的容器包括：数组array, 链表list， 树tree， 栈stack， 队列queue， 散列表hash table, 集合set、映射表map 等等。容器便是容纳这些数据结构的。这些数据结构分为序列式与关联式两种，容器也分为序列式容器和关联式容器。 STL 标准模板库，核心包括容器、算法、迭代器。 元素排列次序与元素无关，由元素添加到容器的顺序决定 一、序列式容器/顺序容器 容器 说明 vector 支持快速随机访问 list 支持快速插入、删除 deque 双端队列 允许两端都可以进行入队和出队操作的队列 stack 后进先出LIFO(Last In First Out)堆栈 queue 先进先出FIFO(First Input First Output)队列 priority_queue 有优先级管理的queue 1. 向量(vector) 连续存储的元素 迭代器的实现 1234567891011121314151617181920//获得指向首元素的迭代器 模板类，不是指针，当做指针来使用vector&lt;int&gt;::iterator it = vec.begin();//遍历元素for (; it &lt; vec.end(); it++)&#123; cout &lt;&lt; *it &lt;&lt; endl;&#125;//begin和end 分别获得 指向容器第一个元素和最后一个元素下一个位置的迭代器//rbegin和rend 分别获得 指向容器最后一个元素和第一个元素前一个位置的迭代器//注意循环中操作元素对迭代器的影响vector&lt;int&gt;::iterator it = vec.begin();for (; it &lt; vec.end(); )&#123; //删除值为2的元素 if (*it == 2) &#123; vec.erase(it); &#125;else &#123; it++; &#125;&#125; 2. 列表 (list) 由节点组成的双向链表，每个结点包含着一个元素 3. 双端队列(deque) 连续存储的指向不同元素的指针所组成的数组 4. 栈(stack) 后进先出的值的排列 12345678stack&lt;int&gt; s;//入栈s.push(1);s.push(2);//弹栈s.pop();//栈顶cout &lt;&lt; s.top() &lt;&lt; endl; 5. 队列(queue) 先进先出的值的排列 123456789queue&lt;int&gt; q;q.push(1);q.push(2);//移除最后一个q.pop();//获得第一个q.front();//最后一个元素cout &lt;&lt; q.back() &lt;&lt; endl; 6. 优先队列(priority_queue ) 元素的次序是由所存储的数据的某个值排列的一种队列 1234567891011121314151617181920212223242526272829303132//最大的在队首priority_queue&lt;int&gt;;//在vector之上实现的priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt;; //vector 承载底层数据结构堆的容器//less 表示数字大的优先级高，而 greater 表示数字小的优先级高//less 让优先队列总是把最大的元素放在队首//greater 让优先队列总是把最小的元素放在队首//less和greater都是一个模板结构体 也可以自定义class Student &#123;public: int grade; Student(int grade):grade(grade) &#123; &#125;&#125;;struct cmp &#123; bool operator ()(Student* s1, Student* s2) &#123; // &gt; 从小到大 // &lt; 从大到小 return s1-&gt;grade &gt; s2-&gt;grade; &#125; bool operator ()(Student s1, Student s2) &#123; return s1.grade &gt; s2.grade; &#125;&#125;;priority_queue&lt;Student*, vector&lt;Student*&gt;, cmp &gt; q1;q1.push(new Student(2));q1.push(new Student(1));q1.push(new Student(3));cout &lt;&lt; q1.top()-&gt;grade &lt;&lt; endl; 二、关联式容器 关联容器和大部分顺序容器操作一致 关联容器中的元素是按关键字来保存和访问的 支持高效的关键字查找与访问 1. 集合(set) 由节点组成的红黑树，每个节点都包含着一个元素,元素不可重复 1234set&lt;string&gt; a; set&lt;string&gt; a1=&#123;\"fengxin\",\"666\"&#125;;a.insert(\"fengxin\"); // 插入一个元素a.erase(\"123\"); //删除 2. 键值对(map) 由{键，值}对组成的集合 123456789101112131415161718192021222324252627map&lt;int, string&gt; m;map&lt;int, string&gt; m1 = &#123; &#123; 1,\"dds\" &#125;,&#123; 2,\"dds\" &#125; &#125;;//插入元素m1.insert(&#123; 3,\"ddss\" &#125;);//pair=键值对pair&lt;int, string&gt; p(4, \"ddsd\");m1.insert(p);//insetrt 返回 map&lt;int, string&gt;::iterator : bool 键值对//如果 插入已经存在的 key，则会插入失败 //multimap：允许重复key//使用m1[3] = \"xx\" 能够覆盖//通过【key】操作元素m1[5] = \"yihan\";cout &lt;&lt; m1[5].c_str() &lt;&lt; endl; //通过key查找元素map&lt;int, string&gt;::iterator it = m1.find(3);cout &lt;&lt; (*it).second.c_str()&lt;&lt; endl;// 删除 m1.erase(5);//遍历for (it = m1.begin(); it != m1.end(); it++)&#123; pair&lt;int, string&gt; item = *it; cout &lt;&lt; item.first &lt;&lt; \":\" &lt;&lt; item.second.c_str() &lt;&lt; endl;&#125; unordered_map c++11取代hash_map（哈希表实现，无序） 哈希表实现查找速度会比RB树实现快,但rb整体更节省内存 需要无序容器，高频快速查找删除，数据量较大用unordered_map； 需要有序容器，查找删除频率稳定，在意内存时用map。 3. 红黑树红黑树(Red Black Tree)又称为 RB树,是一种相对平衡二叉树 。 1.节点是红色或黑色。 2.根节点是黑色。 3.每个叶子节点(空节点)都是黑色的。 4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点) 5.从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。 插入新节点总是红色节点 如果插入节点的父节点是黑色, 能维持性质 如果插入节点的父节点是红色, 破坏了性质。插入算法就是通过重新着色或旋转, 来维持性质 插入 7 后,破坏了规则，那么需要根据不同的状况进行不同的策略使其平衡并符合规则。 7的父节点8 与叔父节点 12 都是红色，则我们可以将8、12两个重绘为黑色并重绘祖父节点9为红色。 这里9是根节点，为了满足规则1，又把它重绘为黑色 . 经过调整： 现在满足5个规则，因此7插入完成。 接下来插入 6 现在新节点 6 是 父节点 7的左节点，而6的叔父节点 缺少，父节点 7 又是祖父节点8的左子节点 ， 这种情形下，我们进行针对6节点的祖父节点8的一次右旋转 右旋转： 顺时针旋转红黑树的两个节点，使得父节点被自己的左孩子取代，而自己成为自己的右孩子。 左旋转则倒过来 再切换 7 和 8 的颜色 再插入5，5和6都是红色，将 父节点 6 和叔父节点 8 绘为黑色，祖父7设为红色，最终","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列5】c++ 面向对象编程","slug":"android/ndk/ndk-5","date":"2019-10-03T07:13:17.000Z","updated":"2019-10-31T08:05:01.042Z","comments":true,"path":"android/ndk/ndk-5/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-5/","excerpt":"","text":"关于java的面向对象，我们能说出花来，这篇主要讲c++的面向对象 一. 类C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，用户定义的类型。 12345678910class Student &#123; int i; //默认 privatepublic: Student(int i,int j,int k):i(i),j(j),k(k)&#123;&#125;; //构造方法 ~Student()&#123;&#125;; //析构方法 private: int j;protected: int k;&#125;; 调用方法 12345678910//调用构造方法 栈//出方法释放student 调用析构方法Student student(1,2,3); //动态内存(堆)Student *student = new Student(1,2,3);//释放delete student;student = 0; 二. 常量函数三. 友元四. 静态成员123456789101112131415161718192021//Instance.hclass Instance &#123;public: static Instance* getInstance(); void printHello();private: static Instance *instance;&#125;;//Instance.cpp#include \"Instance.h\"Instance* Instance::instance = 0;Instance* Instance::getInstance() &#123; //C++11以后，编译器保证内部静态变量的线程安全性 if (!instance) &#123; instance = new Instance; &#125; return instance;&#125; 五. 重载函数六. 继承七. 多态多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。 静态多态（静态联编）是指在编译期间就可以确定函数的调用地址，通过函数重载和模版（泛型编程）实现 动态多态（动态联编）是指函数调用的地址不能在编译器期间确定，必须需要在运行时才确定 ,通过继承+虚函数 实现 虚函数### 八. 模板模板是泛型编程的基础 函数模板类模板(泛型类)12345678910template&lt;class E,class T&gt;class Queue &#123;public: T add(E e,T t)&#123; return e+t; &#125;&#125;;Queue&lt;int,float&gt; q;q.add(1,1.1f) = 2.1f 代码https://github.com/ddssingsong/AnyNdk","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列4】c++  字符串、c兼容、引用、命名空间","slug":"android/ndk/ndk-4","date":"2019-10-03T07:13:10.000Z","updated":"2019-10-31T07:51:35.603Z","comments":true,"path":"android/ndk/ndk-4/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-4/","excerpt":"终于开始c++基础的整理了，本节介绍c++基础内容","text":"终于开始c++基础的整理了，本节介绍c++基础内容 一、输出C使用printf向终端输出信息，C++提供了 标准输出流 123456#include &lt;iostream&gt;using namespace std;// 1. c++输出int time = 8;cout &lt;&lt; \"dds:\" &lt;&lt; time &lt;&lt; \"点,\" &lt;&lt; \"hello world\" &lt;&lt; endl; 二、函数符号兼容C的大部分代码可以在C++中直接使用，但是仍然有需要注意的地方。 12345//如果需要在C++中调用C实现的库中的方法 extern//指示编译器这部分代码使用C的方式进行编译而不是C++extern \"C\" void func(int x, int y); 对于 func 函数 被C的编译器编译后在函数库中的名字可能为func(无参数符号)，而C++编译器则会产生类似funcii之类的名字。 因此，对于C库可以 1234567891011#ifdef __cplusplusextern \"C\"&#123;#endif void func(int x,int y); #ifdef __cplusplus &#125;#endif//__cplusplus 是由c++编译器定义的宏，用于表示当前处于c++环境 三、引用引用是C++定义的一种新类型，引用和指针是两个东西，这里需要分清楚 12345678910//声明形参为引用void change(int&amp; i) &#123; i = 10;&#125;int i = 1;change(i);printf(\"%d\\n\",i); //i == 10 四、字符串字符串实际上是使用 NULL字符 &#39;\\0&#39;终止的一维字符数组。 12345//字符数组 = 字符串char str1[6] = &#123;'H', 'e', 'l', 'l', 'o', '\\0'&#125;;//自动加入\\0char str2[] = \"Hello\"; 字符串操作 函数 描述 strcpy(s1, s2); 复制字符串 s2 到字符串 s1。 strcat(s1, s2); 连接字符串 s2 到字符串 s1 的末尾。 strlen(s1); 返回字符串 s1 的长度。 strcmp(s1, s2); 如果 s1 和 s2 相同，则返回 0；如果 s1 &lt; s2 则返回小于0；如果 s1&gt;s2 则返回大于0 strchr(s1, ch); 返回指向字符串 s1 中字符 ch 的第一次出现的位置的指针。 strstr(s1, s2); 返回指向字符串 s1 中字符串 s2 的第一次出现的位置的指针。 C++ string类C++ 标准库提供了 string 类类型，支持上述所有的操作，另外还增加了其他更多的功能。 1234567891011121314151617181920#include &lt;string&gt;//string 定义在 std命令空间中usning namespace std;string str1 = \"Hello\";string str2 = \"World\";str1.append(str2);//获得c 风格字符串const char *s1 = str1.c_str();//字符串长度str1.size();//长度是否为0str1.empty();...... 五. 命名空间namespace 命名空间 相当于package 1234567891011121314151617181920namespace A&#123; void a()&#123;&#125;&#125;错误 : a();// :: 域操作符正确： A::a();//当然也能够嵌套namespace A &#123; namespace B&#123; void a() &#123;&#125;; &#125;&#125;A::B::a();//还能够使用using 关键字using namespace A;using namespace A::B; 代码https://github.com/ddssingsong/AnyNdk","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列3】c语言 结构体和共用体","slug":"android/ndk/ndk-3","date":"2019-10-03T03:14:11.000Z","updated":"2019-10-31T07:11:38.354Z","comments":true,"path":"android/ndk/ndk-3/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-3/","excerpt":"感觉c这块的内容真的无比枯燥，但在整理的过程中确实又学会了很多 这篇主要讲c语言里的结构体和共用体","text":"感觉c这块的内容真的无比枯燥，但在整理的过程中确实又学会了很多 这篇主要讲c语言里的结构体和共用体 一、结构体1. 声明和使用结构体是C编程中一种用户自定义的数据类型，类似于Java的JavaBean 12345678910111213// 一般定义变量 student a struct Student&#123; char name[50]; int age;&#125; student,a;//使用typedef定义typedef struct&#123; char name[50]; int age;&#125; Student; 当结构体需要内存过大，使用动态内存申请。结构体占用字节数和结构体内字段有关，指针占用内存就是4/8字节，因此传指针比传值效率更高。 1234Student *s = (Student*)malloc(sizeof(Student));memset(s,0,sizeof(Student));printf(\"%d\\n\", s-&gt;age); 2. 字节对齐内存空间按照字节划分，理论上可以从任何起始地址访问任意类型的变量。 但实际中在访问特定类型变量时经常在特定的内存地址开始访问，这就需要各种类型数据按照一定的规则在空间上排列，而不是顺序一个接一个地存放，这就是对齐。 字节对齐的问题主要就是针对结构体。 12345678910111213141516171819202122struct Struct1&#123; short a; int b; short c; &#125;;struct Struct2&#123; short a; short c; int b;&#125;;// short = 2 补 2// int = 4// short = 2 补 2sizeof(Struct1) = 12 // 2个short在一起组成一个 4 // int = 4sizeof(Struct2) = 8 指定对齐位数 #pragma pack(n)的意思是告诉编译器字节对齐方式为n字节对齐，n字节对齐就是说变量存放的起始地址的偏移量有两种情况： 第一、如果n大于等于该变量所占用的字节数，那么偏移量必须满足默认的对齐方式， 第二、如果n小于该变量的类型所占用的字节数，那么偏移量为n的倍数，不用满足默认的对齐方式。 结构的总大小也有个约束条件，分下面两种情况： 如果n大于所有成员变量类型所占用的字节数，那么结构的总大小必须为占用空间最大的变量占用的空间数的倍数；否则必须为n的倍数。 123456789101112#pragma pack(2) //指定以2字节对齐struct MyStruct1&#123; short a; int b; short c; &#125;;#pragma pack() //取消对齐//short = 2//int = 4 用2的倍数进行对齐//short = 2 二、共用体在相同的内存位置存储不同的数据类型 共用体占用的内存应足够存储共用体中最大的成员 123456789101112//占用4字节union Data&#123; int i; short j;&#125;union Data data;data.i = 1; 1 //i的数据损坏data.j = 1.1f; 1 共用体在一般的编程中应用较少，在单片机中应用较多。 代码https://github.com/ddssingsong/AnyNdk","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列2】c语言 指针、函数、预处理器","slug":"android/ndk/ndk-2","date":"2019-10-02T03:14:17.000Z","updated":"2019-10-31T06:28:31.448Z","comments":true,"path":"android/ndk/ndk-2/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-2/","excerpt":"这是我们NDK学习的第二课，了解下c语言中指针、函数、预处理器","text":"这是我们NDK学习的第二课，了解下c语言中指针、函数、预处理器 一、指针指针是一个变量，其值为地址，声明指针或者不再使用后都要将其置为0 (NULL) 12345int *a; 正规int* a;int * a;//因为 其他写法看起来有歧义int* a,b; 野指针 未初始化的指针 悬空指针 指针最初指向的内存已经被释放了的一种指针 具体使用 12345678//声明一个整型变量int i = 10;//将i的地址使用取地址符给p指针int *p = &amp;i;//输出 0xffff 16进制地址printf(\"%#x\\n\", &amp;i); 0xdaf3bab4printf(\"%#x\\n\", &amp;p); 0xdaf3baa8 指针多少个字节？ 指针指向地址，存放的是地址 地址在 32位中指针占用4字节 64为8 1234//32位：sizeof(p) == 4;//64位:sizeof(p) == 8; 1. 解引用解析并返回内存地址中保存的值，这个特性主要用于函数传值并修改参数的值 123456789101112int i = 10;int *p = &amp;i;//p指向一个内存地址，使用*解出这个地址的值 即为 10int pv = *p;//修改地址的值,则i值也变成100*p = 100;printf(\"%d\\n\", i); 100printf(\"%d\\n\", *p); 100printf(\"%d\\n\", pv); 10 2. 指针运算我们可以使用指针来读取和修改对象 12345678int i1[] = &#123;11,22,33,44,55&#125;;int *p1 = i1;//*p1 指向第一个数据 11，移动指针就指向第二个了for (size_t i = 0; i &lt; 5; i++)&#123; printf(\"%d\\n\", *p1++); &#125; 3. 数组和指针在c语言中，指针和数组名都表示地址 数组是一块内存连续的数据。 指针是一个指向内存空间的变量 123456789int i1[] = &#123;11,22,33,44,55&#125;;//直接输出数组名会得到数组首元素的地址printf(\"%#x\\n\",i1); 0xdaf3baa0//解引用printf(\"%d\\n\",*i1); 11 //将数组名赋值给一个指针，这时候指针指向数组首元素地址int *p1 = i1; 数组指针123456789101112131415//二维数组类型是 int (*p)[x]int array[2][3] = &#123; &#123;11,22,33&#125;,&#123;44,55,66&#125; &#125;;//array1 就是一个 int[3] 类型的指针int (*array1)[3] = array;//怎么取 55 ？//通过下标array[1][1] == array1[1][1]//通过解引用int i = *(*(array1 + 1) + 1);printf(\"%d\\n\", i); 55 指针数组数组元素全为指针变量的数组称为指针数组 123int *array2[2];array2[0] = &amp;i;array2[1] = &amp;j; 4. const关键字常量修饰符 const char * 1234567char str[] = \"hello\";const char *p = str;str[0] = 'c'; //正确p[0] = 'c'; //错误 不能通过指针修改 const char// 可以修改p的指向，指向其他的数据p = \"12345\"; char const * 12//性质和 const char * 一样char const *p1; char * const 1234567char str[] = \"hello\";//p2是一个const指针 指向char类型数据char * const p2 = str;p2[0] = 'd'; //正确p2 = \"12345\"; //错误 char const* const 123456char str[] = \"hello\";// p3是一个const的指针变量 意味着不能修改它的指向// 同时指向一个 const char 类型 意味着不能修改它指向的字符// 集合了 const char * 与 char * constchar const* const p3 = str; 5. 多级指针指向指针的指针 一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。 123456int a = 10;int *i = &amp;a;int **j = &amp;i;// *j 解出 i printf(\"%d\\n\", **j); 多级指针的意义! ——&gt;函数的引用传值 二、函数1. 函数调用C中的函数与java没有区别。都是一组一起执行一个任务的语句，也都由 函数头与函数体构成 在使用之前必须声明 传值调用把参数的值复制给函数的形式参数。修改形参不会影响实参 引用调用形参为指向实参地址的指针，可以通过指针修改实参。 1234567891011121314void change1(int *i) &#123; *i = 10;&#125;void change2(int *i) &#123; *i = 10;&#125;int i = 1;change1(i);printf(\"%d\\n\",i); //i == 1change2(&amp;i);printf(\"%d\\n\",i); //i == 10 2. 可变参数与Java一样，C当中也有可变参数 123456789101112131415161718192021#include &lt;stdarg.h&gt;int addR(int num, ...) &#123; va_list valist; int sum = 0; // 初始化 va_start(valist, num); for (size_t i = 0; i &lt; num; i++) &#123; //访问参数 int j = va_arg(valist, int); printf(\"%d\\n\", j); sum += j; &#125; //清理 va_end(valist); return sum;&#125; // ------------调用---------------- int sum = addR(3, 21, 122, 32); printf(\"sum :%d\\n\", sum); 175 3. 函数指针函数指针是指向函数的指针变量 123456789101112131415161718192021222324252627282930313233343536373839404142void println(char *buffer) &#123; printf(\"%s\\n\", buffer);&#125;//接受一个函数作为参数void say(void(*p)(char*), char *buffer) &#123; p(buffer);&#125;// 赋值函数void(*p)(char*) = println;p(\"hello\");//传递参数say(println, \"hello\");//typedef 创建别名 由编译器执行解释typedef void(*Fun)(char *);Fun fun = println;fun(\"hello\");say(fun, \"hello\");//--------------类似java的回调函数------------------typedef void(*Callback)(int);void test(Callback callback) &#123; callback(\"成功\"); callback(\"失败\");&#125;void callback(char *msg) &#123; printf(\"%s\\n\", msg);&#125;test(callback);// 不使用别名则是这么调用void (*p)(char *) = callback;test(p); 三、预处理器预处理器不是编译器，但是它是编译过程中一个单独的步骤，预处理器是一个文本替换工具，所有的预处理器命令都是以井号（#）开头 1. 常用预处理器 预处理器 说明 #include 导入头文件 #if if #elif else if #else else #endif 结束 if #define 宏定义 #ifdef 如果定义了宏 #ifndef 如果未定义宏 #undef 取消宏定义 2. 宏预处理器是一个文本替换工具，宏就是文本替换 1234//宏一般使用大写区分//宏变量//在代码中使用 A 就会被替换为1#define A 1 宏函数 12//宏函数#defind test(i) i &gt; 10 ? 1: 0 其他 12345678// \\ 换行符#define PRINT_I(arg) if(arg) &#123; \\ printf(\"%d\\n\",arg); \\ &#125;PRINT_I(dn_i);//可变宏#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,\"NDK\", __VA_ARGS__); 宏函数 优点： 文本替换，每个使用到的地方都会替换为宏定义。 不会造成函数调用的开销（开辟栈空间，记录返回地址，将形参压栈，从函数返回还要释放堆栈。）缺点： 生成的目标文件大，不会执行代码检查 3. 内联函数和宏函数工作模式相似，但是两个不同的概念，首先是函数，那么就会有类型检查同时也可以debug 在编译时候将内联函数插入。 不能包含复杂的控制语句，while、switch，并且内联函数本身不能直接调用自身。 如果内联函数的函数体过大，编译器会自动的把这个内联函数变成普通函数。 1234567891011121314#include &lt;stdio.h&gt; //函数定义为inline即:内联函数 inline char* test(int a) &#123; return (i % 2 &gt; 0) ? \"奇\" : \"偶\"; &#125; int main() &#123; int i = 0; for (i=1; i &lt; 100; i++) &#123; printf(\"i:%d 奇偶性:%s /n\", i, dbtest(i)); &#125; &#125; 在内部的工作就是在每个for循环的内部任何调用test(i)的地方都换成了(i%2&gt;0)?”奇”:”偶”这样就避免了频繁调用函数对栈内存重复开辟所带来的消耗。 代码https://github.com/ddssingsong/AnyNdk","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"【NDK系列1】c语言基本数据类型和内存布局","slug":"android/ndk/ndk-1","date":"2019-10-01T08:40:34.000Z","updated":"2019-10-31T03:08:20.167Z","comments":true,"path":"android/ndk/ndk-1/","link":"","permalink":"https://ddssingsong.github.io/android/ndk/ndk-1/","excerpt":"这是我们NDK学习的第一课，了解下c语言的数据类型和数组的内存布局","text":"这是我们NDK学习的第一课，了解下c语言的数据类型和数组的内存布局 一、基本数据类型1. 整数类型 signed——&gt;有符号，可修饰 char、int。Int是默认有符号的。 unsigned——&gt;无符号，可修饰 int 、char 基本类型如下 整型 字节 取值范围 占位 int 4 -2,147,483,648 到 2,147,483,647 %d unsigned int 4 0 到 4,294,967,295 %u short 2 -32,768 到 32,767 %hd unsigned short 2 0 到 65,535 %hu long 4 -2,147,483,648 到 2,147,483,647 %ld unsigned long 4 0 到 4,294,967,295 %lu char 1 -128 到 127 %c unsigned char 1 0 到 255 %c tips: 为了得到某个类型或某个变量在特定平台上的准确大小，使用 sizeof 运算符。 表达式 sizeof(type) 得到对象或类型的存储字节大小。 long int 其实就是长整型 = long 可以省去int，在标准中,规定 int至少和short一样长，long至少和int一样长。 为什么会存在long? long和int在早期16位电脑时候 int 2字节，long 4字节，而计算机发展到现在，一般32、64下，long和int一样。和java类比的话，java的long就是 long long 8字节 2. 浮点数类型浮点数类型如下 浮点型 字节 精度 占位 float 4 6位小数 %f double 8 15位小数 %lf long double 8 19位小数 %Lf 3. 其他关于8进制和16进制的打印显示 进制 打印参数 8进制 %o 16进制 小写： %x 大写：%X (0x)+16进制 %#x tips : C99标准以前，C语言里面是没有bool，C++里面才有，C99标准里面定义了bool类型，需要引入头文件stdbool.hbool类型有只有两个值：true =1 、false=0，因此实际上bool就是一个int所以在c/c++中 if 遵循一个规则， 非0为true，非空为true；NULL 其实也就是被define为了 0 二、格式化输出函数printf、sprintf 将格式化的数据写入第一个参数 12345678// 打印char str[100];sprintf(str, \"img/png_%d.png\", 1);printf(\"%s\", str);//使用 0 补到3个字符sprintf(str, \"img/png_%03d.png\", 1);printf(\"%s\", str); 三、数组与内存布局数组 ： 连续的内存 1234567891011//javaint[] a//c//必须声明时候确定大小int a[10] //或者 直接初始化 int a[] = &#123;1,2,3&#125;//大小printf(\"%d\",sizeof(a)/sizeof(int)); tips 栈内存限制 查看 linux： 1ulimit -a 但是直接分配这么大不行，因为堆栈可能保存参数，返回地址等等信息 1. 动态内存申请malloc​ 没有初始化内存的内容,一般调用函数memset来初始化这部分的内存空间. calloc​ 申请内存并将初始化内存数据为NULL. 1int pn = (int)calloc(10, sizeof(int)); realloc​ 对malloc申请的内存进行大小的调整. 12char *a = (char*)malloc(10);realloc(a,20); alloca特别的：在栈申请内存,因此无需释放. 1int *p = (int *)alloca(sizeof(int) * 10); 2. 物理内存和虚拟内存物理内存​ 物理内存指通过物理内存条而获得的内存空间 虚拟内存​ 一种内存管理技术​ 电脑中所运行的程序均需经由内存执行，若执行的程序占用内存很大，则会导致内存消耗殆尽。​ 虚拟内存技术还会匀出一部分硬盘空间来充当内存使用。 进程分配内存主要由两个系统调用完成：brk和mmap 。 brk是将_edata(指带堆位置的指针)往高地址推； mmap 找一块空闲的虚拟内存。 通过glibc (C标准库)中提供的malloc函数完成内存申请 malloc小于128k的内存，使用brk分配内存，将_edata往高地址推,大于128k则使用mmap 存放程序执行代码（cpu要执行的指令） 栈是向低地址扩展数据结构堆是向高地址扩展数据结构 代码收录https://github.com/ddssingsong/AnyNdk","categories":[{"name":"Android","slug":"Android","permalink":"https://ddssingsong.github.io/blog/categories/Android/"},{"name":"NDK","slug":"Android/NDK","permalink":"https://ddssingsong.github.io/blog/categories/Android/NDK/"}],"tags":[{"name":"NDK","slug":"NDK","permalink":"https://ddssingsong.github.io/blog/tags/NDK/"}]},{"title":"更自由的布局","slug":"example/更自由的布局","date":"2019-09-05T16:00:00.000Z","updated":"2019-10-28T05:37:06.313Z","comments":true,"path":"example/更自由的布局/","link":"","permalink":"https://ddssingsong.github.io/example/更自由的布局/","excerpt":"现在（1.2.4 以及更高版本）主题配置文件中旧的侧边栏配置依旧不变，在此基础上新增了layout字段专门用于控制页面显示什么。 12345678910111213141516171819layout: # 文章列表（主页、自定义的列表）布局 posts: # 列表中每一篇文章的meta信息 meta: [title, author, date, categories, top] # 列表类页面的侧边栏 sidebar: [author, grid, category, tagcloud, list] # 文章页面布局 article: # 文章页面主体元素，你也可以在页面的Front-matter中设置 body: [article, comments] # 默认的meta信息，文章中没有配置则按照这里的配置来显示，设置为false则不显示 # 其中，title只在header中有效，music和thumbnail无需在这里设置，文章中有则显示 # 如果tags放置在meta.header中，那么在post列表中不显示（因为卡片下方已经有了） header: [title, author, date, categories, counter, top] footer: [updated, tags, share] # 文章页面的侧边栏 sidebar: [author, toc, grid, category, tagcloud, list, related_posts] # 其他的页面布局暂时等于文章列表","text":"现在（1.2.4 以及更高版本）主题配置文件中旧的侧边栏配置依旧不变，在此基础上新增了layout字段专门用于控制页面显示什么。 12345678910111213141516171819layout: # 文章列表（主页、自定义的列表）布局 posts: # 列表中每一篇文章的meta信息 meta: [title, author, date, categories, top] # 列表类页面的侧边栏 sidebar: [author, grid, category, tagcloud, list] # 文章页面布局 article: # 文章页面主体元素，你也可以在页面的Front-matter中设置 body: [article, comments] # 默认的meta信息，文章中没有配置则按照这里的配置来显示，设置为false则不显示 # 其中，title只在header中有效，music和thumbnail无需在这里设置，文章中有则显示 # 如果tags放置在meta.header中，那么在post列表中不显示（因为卡片下方已经有了） header: [title, author, date, categories, counter, top] footer: [updated, tags, share] # 文章页面的侧边栏 sidebar: [author, toc, grid, category, tagcloud, list, related_posts] # 其他的页面布局暂时等于文章列表","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[{"name":"tips","slug":"tips","permalink":"https://ddssingsong.github.io/blog/tags/tips/"}]},{"title":"支持多用户","slug":"example/多用户","date":"2019-04-05T16:00:00.000Z","updated":"2019-10-28T05:39:06.068Z","comments":true,"path":"example/多用户/","link":"","permalink":"https://ddssingsong.github.io/example/多用户/","excerpt":"在博客根目录中配置的属性是默认作者：123author: Mr.Xavatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.pngurl: http://mxclub.github.io 在文章的Front-matter中可以配置本篇文章的作者： 123456---author: name: xaoxuu avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png url: https://xaoxuu.com--- 写法示例： 123456789101112---type: blogtitle: 支持多用户author: name: xaoxuu avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png url: https://xaoxuu.comdate: 2019-04-06categories: [Hexo,教程]valine: path: /top/---","text":"在博客根目录中配置的属性是默认作者：123author: Mr.Xavatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.pngurl: http://mxclub.github.io 在文章的Front-matter中可以配置本篇文章的作者： 123456---author: name: xaoxuu avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png url: https://xaoxuu.com--- 写法示例： 123456789101112---type: blogtitle: 支持多用户author: name: xaoxuu avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png url: https://xaoxuu.comdate: 2019-04-06categories: [Hexo,教程]valine: path: /top/---","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[],"author":{"name":"xaoxuu","avatar":"https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png","url":"https://xaoxuu.com"}},{"title":"自定义meta信息","slug":"example/自定义meta信息","date":"2019-04-05T16:00:00.000Z","updated":"2019-10-28T05:39:15.618Z","comments":true,"path":"example/自定义meta信息/","link":"","permalink":"https://ddssingsong.github.io/example/自定义meta信息/","excerpt":"现在你可以在文章开头和末尾放置任意支持的meta标签，支持的标签有：12345678titleauthordateupdatedcategoriestagscountertop 例如本文： 123456789101112---type: blogtitle: 自定义meta信息date: 2019-04-06categories: [Hexo,教程]tags: ssmeta: header: [title, author, updated, counter] footer: [categories, tags, share]valine: path: /top/--- 如果不写，就按照主题配置文件中的显示。如果不想显示任何meta标签，就写false，例如关于页面： 123456789---title: 关于meta: header: false footer: falsevaline: placeholder: 有什么想对我说的呢？sidebar: false---","text":"现在你可以在文章开头和末尾放置任意支持的meta标签，支持的标签有：12345678titleauthordateupdatedcategoriestagscountertop 例如本文： 123456789101112---type: blogtitle: 自定义meta信息date: 2019-04-06categories: [Hexo,教程]tags: ssmeta: header: [title, author, updated, counter] footer: [categories, tags, share]valine: path: /top/--- 如果不写，就按照主题配置文件中的显示。如果不想显示任何meta标签，就写false，例如关于页面： 123456789---title: 关于meta: header: false footer: falsevaline: placeholder: 有什么想对我说的呢？sidebar: false---","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[{"name":"ss","slug":"ss","permalink":"https://ddssingsong.github.io/blog/tags/ss/"}]},{"title":"引用外部文章","slug":"example/引用外部文章","date":"2019-04-05T16:00:00.000Z","updated":"2019-10-28T05:37:49.232Z","comments":true,"path":"example/引用外部文章/","link":"","permalink":"https://ddssingsong.github.io/example/引用外部文章/","excerpt":"只需设置permalink即可：1234567---author: name: xaoxuu avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png url: https://xaoxuu.compermalink: https://xaoxuu.com/wiki/material-x/--- 项目分类中的均为外部文章，前往查看。","text":"只需设置permalink即可：1234567---author: name: xaoxuu avatar: https://cdn.jsdelivr.net/gh/xaoxuu/assets@master/avatar/avatar.png url: https://xaoxuu.compermalink: https://xaoxuu.com/wiki/material-x/--- 项目分类中的均为外部文章，前往查看。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[]},{"title":"多语言","slug":"example/多语言","date":"2018-12-29T16:00:00.000Z","updated":"2019-10-28T05:39:29.436Z","comments":true,"path":"example/多语言/","link":"","permalink":"https://ddssingsong.github.io/example/多语言/","excerpt":"在主目录找到或者新增language，例如： 12345language:- zh-CN- en- zh-HK- zh-TW 博客将按照给定的优先级显示语言。","text":"在主目录找到或者新增language，例如： 12345language:- zh-CN- en- zh-HK- zh-TW 博客将按照给定的优先级显示语言。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[]},{"title":"文章专属BGM","slug":"example/文章专属BGM","date":"2018-12-29T16:00:00.000Z","updated":"2019-10-28T05:39:28.204Z","comments":true,"path":"example/文章专属BGM/","link":"","permalink":"https://ddssingsong.github.io/example/文章专属BGM/","excerpt":"1234567---title: 文章专属BGMdate: 2018-12-30music: type: song # song （单曲） album （专辑） playlist （歌单） search （搜索） id: 26664345 # 歌曲/专辑/歌单 ID--- 详情见文档：https://xaoxuu.com/wiki/material-x/third-party-services/","text":"1234567---title: 文章专属BGMdate: 2018-12-30music: type: song # song （单曲） album （专辑） playlist （歌单） search （搜索） id: 26664345 # 歌曲/专辑/歌单 ID--- 详情见文档：https://xaoxuu.com/wiki/material-x/third-party-services/","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[]},{"title":"置顶：博客源码","slug":"example/top","date":"2018-12-29T16:00:00.000Z","updated":"2019-10-28T08:46:00.705Z","comments":true,"path":"example/top/","link":"","permalink":"https://ddssingsong.github.io/example/top/","excerpt":"文章的Front-matter填写top: true就置顶了。1top: true 这是一个示例博客。源码目录：https://github.com/xaoxuu/blog-example","text":"文章的Front-matter填写top: true就置顶了。1top: true 这是一个示例博客。源码目录：https://github.com/xaoxuu/blog-example 没有更多了哦。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[]},{"title":"共用一个评论框","slug":"example/共用一个评论框","date":"2018-12-29T16:00:00.000Z","updated":"2019-10-28T05:39:30.425Z","comments":true,"path":"example/共用一个评论框/","link":"","permalink":"https://ddssingsong.github.io/example/共用一个评论框/","excerpt":"写法示例： 123456---title: 共用一个评论框valine: path: /top/ placeholder: 你觉得共用一个评论框有意义吗？---","text":"写法示例： 123456---title: 共用一个评论框valine: path: /top/ placeholder: 你觉得共用一个评论框有意义吗？---","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[]},{"title":"摘要注意事项","slug":"example/摘要注意事项","date":"2018-12-29T16:00:00.000Z","updated":"2019-10-28T05:38:09.777Z","comments":true,"path":"example/摘要注意事项/","link":"","permalink":"https://ddssingsong.github.io/example/摘要注意事项/","excerpt":"如果使用&lt;!-- more --&gt;来实现摘要，则&lt;!-- more --&gt;前后一定要有空行，不然可能导致显示错位。 12345这是摘要&lt;!-- more --&gt;这是正文","text":"如果使用&lt;!-- more --&gt;来实现摘要，则&lt;!-- more --&gt;前后一定要有空行，不然可能导致显示错位。 12345这是摘要&lt;!-- more --&gt;这是正文","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"教程","slug":"Hexo/教程","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/教程/"}],"tags":[]},{"title":"hexo.sh","slug":"https://xaoxuu.com/wiki/hexo.sh/","date":"2018-08-08T16:00:00.000Z","updated":"2019-04-03T16:00:00.000Z","comments":true,"path":"https://xaoxuu.com/wiki/hexo.sh//","link":"","permalink":"https://ddssingsong.github.iohttps://xaoxuu.com/wiki/hexo.sh//","excerpt":"一个方便管理与发布hexo博客的脚本。","text":"一个方便管理与发布hexo博客的脚本。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"hexo","slug":"Hexo/hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/hexo/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://ddssingsong.github.io/blog/tags/shell/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/tags/Hexo/"}]},{"title":"Material X","slug":"https://xaoxuu.com/wiki/material-x/","date":"2017-10-23T16:00:00.000Z","updated":"2019-04-05T16:00:00.000Z","comments":true,"path":"https://xaoxuu.com/wiki/material-x//","link":"","permalink":"https://ddssingsong.github.iohttps://xaoxuu.com/wiki/material-x//","excerpt":"一个简约的卡片式Hexo博客主题。","text":"一个简约的卡片式Hexo博客主题。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/"},{"name":"materialX","slug":"Hexo/materialX","permalink":"https://ddssingsong.github.io/blog/categories/Hexo/materialX/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ddssingsong.github.io/blog/tags/Hexo/"}]},{"title":"Images","slug":"test/images","date":"2013-12-26T14:46:49.000Z","updated":"2019-10-28T02:13:13.382Z","comments":true,"path":"test/images/","link":"","permalink":"https://ddssingsong.github.io/test/images/","excerpt":"","text":"This is a image test post.","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Excerpts","slug":"test/excerpts","date":"2013-12-24T16:23:23.000Z","updated":"2019-10-28T02:12:14.983Z","comments":true,"path":"test/excerpts/","link":"","permalink":"https://ddssingsong.github.io/test/excerpts/","excerpt":"The following contents should be invisible in home/archive page.","text":"The following contents should be invisible in home/archive page. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget urna vitae velit eleifend interdum at ac nisi. In nec ligula lacus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Sed eu cursus erat, ut dapibus quam. Aliquam eleifend dolor vitae libero pharetra adipiscing. Etiam adipiscing dolor a quam tempor, eu convallis nulla varius. Aliquam sollicitudin risus a porta aliquam. Ut nec velit dolor. Proin eget leo lobortis, aliquam est sed, mollis mauris. Fusce vitae leo pretium massa accumsan condimentum. Fusce malesuada gravida lectus vel vulputate. Donec bibendum porta nibh ut aliquam. Sed lorem felis, congue non fringilla eu, aliquam eu eros. Curabitur orci libero, mollis sed semper vitae, adipiscing in lectus. Aenean non egestas odio. Donec sollicitudin nisi quis lorem gravida, in pharetra mauris fringilla. Duis sit amet faucibus dolor, id aliquam neque. In egestas, odio gravida tempor dictum, mauris felis faucibus purus, sit amet commodo lacus diam vitae est. Ut ut quam eget massa semper sodales. Aenean non ipsum cursus, blandit lectus in, ornare odio. Curabitur ultrices porttitor vulputate.","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Videos","slug":"test/videos","date":"2013-12-24T16:19:15.000Z","updated":"2019-10-28T02:12:50.200Z","comments":true,"path":"test/videos/","link":"","permalink":"https://ddssingsong.github.io/test/videos/","excerpt":"","text":"This is a video test post. Youtube Vimeo","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Gallery Post","slug":"test/gallery-post","date":"2013-12-24T16:16:18.000Z","updated":"2019-10-28T02:13:11.762Z","comments":true,"path":"test/gallery-post/","link":"","permalink":"https://ddssingsong.github.io/test/gallery-post/","excerpt":"","text":"This post contains 4 photos: Widescreen wallpaper Portrait photo Dual widescreen wallpaper Small photo All photos should be displayed properly. From Wallbase.cc","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Tag Plugins","slug":"test/tag-plugins","date":"2013-12-24T16:14:39.000Z","updated":"2019-10-28T02:13:09.336Z","comments":true,"path":"test/tag-plugins/","link":"","permalink":"https://ddssingsong.github.io/test/tag-plugins/","excerpt":"This post is used for testing tag plugins. See docs for more info.","text":"This post is used for testing tag plugins. See docs for more info. Block QuoteNormal blockquote Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna. Quote from a bookDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake Quote from TwitterNEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 Quote from an article on the webEvery interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing Code BlockNormal code block1alert(&apos;Hello World!&apos;); With captionArray.map1array.map(callback[, thisArg]) With caption and URL.compactUnderscore.js12.compact([0, 1, false, 2, ‘’, 3]);=&gt; [1, 2, 3] With marked linesLine 1,7-8,10 should be marked with different color. 1234567891011const http = require('http');const hostname = '127.0.0.1';const port = 1337;http.createServer((req, res) =&gt; &#123; res.writeHead(200, &#123; 'Content-Type': 'text/plain' &#125;); res.end('Hello World\\n');&#125;).listen(port, hostname, () =&gt; &#123; console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);&#125;); Note: Theme’s style should support .highlight.line.marked (recommend to use the selection or current line color). Gist jsFiddle PullquoteLeftLorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas tempus molestie arcu, et fringilla mauris placerat ac. Nullam luctus bibendum risus. Ut cursus sed ipsum feugiat egestas. Suspendisse elementum, velit eu consequat consequat, augue lorem dapibus libero, eget pulvinar dolor est sit amet nulla. Suspendisse a porta tortor, et posuere mi. Pellentesque ultricies, mi quis volutpat malesuada, erat felis vulputate nisl, ac congue ante tortor ut ante. Proin aliquam sem vel mauris tincidunt, eget scelerisque tortor euismod. Nulla tincidunt enim nec commodo dictum. Mauris id sapien et orci gravida luctus id ut dui. In vel vulputate odio. Duis vel turpis molestie, scelerisque enim eu, lobortis eros. Cras at ipsum gravida, sagittis ante vel, viverra tellus. Nunc mauris turpis, elementum ullamcorper nisl pretium, ultrices cursus justo. Mauris porttitor commodo eros, ac ornare orci interdum in. Cras fermentum cursus leo sed mattis. In dignissim lorem sem, sit amet elementum mauris venenatis ac. RightLorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ligula justo, lobortis sit amet semper vel, dignissim sit amet libero. Praesent ac tempus ligula. Maecenas at gravida odio. Etiam tristique volutpat lacus eu faucibus. Donec non tempus arcu. Phasellus adipiscing, mauris nec mollis egestas, ipsum nunc auctor velit, et rhoncus lorem ipsum at ante. Praesent et sem in velit volutpat auctor. Duis vel mauris nulla. Maecenas mattis interdum ante, quis sagittis nibh cursus et. Nulla facilisi. Morbi convallis gravida tortor, ut fermentum enim gravida et. Nunc vel dictum nisl, non ultrices libero. Proin vestibulum felis eget orci consectetur lobortis. Vestibulum augue nulla, iaculis vitae augue vehicula, dignissim ultrices libero. Sed imperdiet urna et quam ultrices tincidunt nec ac magna. Etiam vel pharetra elit.","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"日本語テスト","slug":"test/日本語テスト","date":"2013-12-24T15:33:26.000Z","updated":"2019-10-28T02:11:45.804Z","comments":true,"path":"test/日本語テスト/","link":"","permalink":"https://ddssingsong.github.io/test/日本語テスト/","excerpt":"","text":"This is a Japanese test post. 私は昨日ついにその助力家というのの上よりするたなけれ。 最も今をお話団はちょうどこの前後なかろでくらいに困りがいるたをは帰着考えたなかって、そうにもするでうたらない。 がたを知っないはずも同時に九月をいよいよたありた。 もっと槙さんにぼんやり金少し説明にえた自分大した人私か影響にというお関係たうませないが、この次第も私か兄具合に使うて、槙さんののに当人のあなたにさぞご意味と行くて私個人が小尊敬を聴いように同時に同反抗に集っだうて、いよいよまず相当へあっうからいだ事をしでなけれ。 それでそれでもご時日をしはずはたったいやと突き抜けるますて、その元がは行ったてという獄を尽すていけですた。 この中道具の日その学校はあなたごろがすまなりかとネルソンさんの考えるですん、辺の事実ないというご盲従ありたですと、爺さんのためが薬缶が結果までの箸の当時してならて、多少の十月にためからそういう上からとにかくしましないと触れべきものたで、ないうですと多少お人達したのでたた。 From すぐ使えるダミーテキスト - 日本語 Lorem ipsum","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"中文測試","slug":"test/中文測試","date":"2013-12-24T15:31:30.000Z","updated":"2019-10-28T02:13:15.549Z","comments":true,"path":"test/中文測試/","link":"","permalink":"https://ddssingsong.github.io/test/中文測試/","excerpt":"","text":"This is a Chinese test post. 燕子去了，有再来的时候；杨柳枯了，有再青的时候；桃花谢了，有再开的时候。但是，聪明的，你告诉我，我们的日子为什么一去不复返呢？——是有人偷了他们罢：那是谁？又藏在何处呢？是他们自己逃走了罢：现在又到了哪里呢？ 我不知道他们给了我多少日子；但我的手确乎是渐渐空虚了。在默默里算着，八千多日子已经从我手中溜去；像针尖上一滴水滴在大海里，我的日子滴在时间的流里，没有声音，也没有影子。我不禁头涔涔而泪潸潸了。 去的尽管去了，来的尽管来着；去来的中间，又怎样地匆匆呢？早上我起来的时候，小屋里射进两三方斜斜的太阳。太阳他有脚啊，轻轻悄悄地挪移了；我也茫茫然跟着旋转。于是——洗手的时候，日子从水盆里过去；吃饭的时候，日子从饭碗里过去；默默时，便从凝然的双眼前过去。我觉察他去的匆匆了，伸出手遮挽时，他又从遮挽着的手边过去，天黑时，我躺在床上，他便伶伶俐俐地从我身上跨过，从我脚边飞去了。等我睁开眼和太阳再见，这算又溜走了一日。我掩着面叹息。但是新来的日子的影儿又开始在叹息里闪过了。 在逃去如飞的日子里，在千门万户的世界里的我能做些什么呢？只有徘徊罢了，只有匆匆罢了；在八千多日的匆匆里，除徘徊外，又剩些什么呢？过去的日子如轻烟，被微风吹散了，如薄雾，被初阳蒸融了；我留着些什么痕迹呢？我何曾留着像游丝样的痕迹呢？我赤裸裸来到这世界，转眼间也将赤裸裸的回去罢？但不能平的，为什么偏要白白走这一遭啊？ 你聪明的，告诉我，我们的日子为什么一去不复返呢？ 1922年3月28日 工步他始能詩的，裝進分星海演意學值例道……於財型目古香亮自和這乎？化經溫詩。只賽嚴大一主價世哥受的沒有中年即病行金拉麼河。主小路了種就小為廣不？ From 亂數假文產生器 - Chinese Lorem Ipsum","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam justo turpis, tincidunt ac convallis id.","slug":"test/long-title","date":"2013-12-24T15:31:06.000Z","updated":"2019-10-28T02:13:10.856Z","comments":true,"path":"test/long-title/","link":"","permalink":"https://ddssingsong.github.io/test/long-title/","excerpt":"","text":"This post has a long title. Make sure the title displayed right.","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Link Post","slug":"test/link-post","date":"2013-12-24T15:30:04.000Z","updated":"2019-10-28T02:13:12.620Z","comments":true,"path":"test/link-post/","link":"http://www.google.com/","permalink":"https://ddssingsong.github.io/test/link-post/","excerpt":"","text":"This is a link post. Clicking on the link should open Google in a new tab or window.","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Elements","slug":"test/elements","date":"2013-12-24T15:29:08.000Z","updated":"2019-10-28T02:13:14.853Z","comments":true,"path":"test/elements/","link":"","permalink":"https://ddssingsong.github.io/test/elements/","excerpt":"","text":"The purpose of this post is to help you make sure all of HTML elements can display properly. If you use CSS reset, don’t forget to redefine the style by yourself. Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6 ParagraphLorem ipsum dolor sit amet, test link consectetur adipiscing elit. Strong text pellentesque ligula commodo viverra vehicula. Italic text at ullamcorper enim. Morbi a euismod nibh. Underline text non elit nisl. Deleted text tristique, sem id condimentum tempus, metus lectus venenatis mauris, sit amet semper lorem felis a eros. Fusce egestas nibh at sagittis auctor. Sed ultricies ac arcu quis molestie. Donec dapibus nunc in nibh egestas, vitae volutpat sem iaculis. Curabitur sem tellus, elementum nec quam id, fermentum laoreet mi. Ut mollis ullamcorper turpis, vitae facilisis velit ultricies sit amet. Etiam laoreet dui odio, id tempus justo tincidunt id. Phasellus scelerisque nunc sed nunc ultricies accumsan. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed erat diam, blandit eget felis aliquam, rhoncus varius urna. Donec tellus sapien, sodales eget ante vitae, feugiat ullamcorper urna. Praesent auctor dui vitae dapibus eleifend. Proin viverra mollis neque, ut ullamcorper elit posuere eget. Praesent diam elit, interdum ut pulvinar placerat, imperdiet at magna. Maecenas ornare arcu at mi suscipit, non molestie tortor ultrices. Aenean convallis, diam et congue ultricies, erat magna tincidunt orci, pulvinar posuere mi sapien ac magna. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Praesent vitae placerat mauris. Nullam laoreet ante posuere tortor blandit auctor. Sed id ligula volutpat leo consequat placerat. Mauris fermentum dolor sed augue malesuada sollicitudin. Vivamus ultrices nunc felis, quis viverra orci eleifend ut. Donec et quam id urna cursus posuere. Donec elementum scelerisque laoreet. List TypesDefinition List (dl)Definition List TitleThis is a definition list division. Ordered List (ol) List Item 1 List Item 2 List Item 3 Unordered List (ul) List Item 1 List Item 2 List Item 3 Table Table Header 1 Table Header 2 Table Header 3 Division 1 Division 2 Division 3 Division 1 Division 2 Division 3 Division 1 Division 2 Division 3 Misc Stuff - abbr, acronym, sub, sup, etc.Lorem superscript dolor subscript amet, consectetuer adipiscing elit. Nullam dignissim convallis est. Quisque aliquam. cite. Nunc iaculis suscipit dui. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus. Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. NBA Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. AVE","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]},{"title":"Hello World","slug":"test/hello-world","date":"2013-12-24T09:49:32.000Z","updated":"2019-10-28T02:13:14.133Z","comments":true,"path":"test/hello-world/","link":"","permalink":"https://ddssingsong.github.io/test/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation to learn how to use.","categories":[],"tags":[{"name":"test","slug":"test","permalink":"https://ddssingsong.github.io/blog/tags/test/"}]}]}